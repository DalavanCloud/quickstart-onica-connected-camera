AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Connected Camera Provisioning SAM Template

Globals:
  Function:
    Timeout: 6

Resources:
  #Lambdas
  StackAvailabilityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handler.getStackAvailability
      Runtime: nodejs8.10
      Role:
        Fn::GetAtt: ProvisioningLambdaRole.Arn
      Environment:
        Variables:
          ProvisioningKeyTableName:
            Ref: ProvisioningKeyTable
      Events:
        StackAvailability:
          Type: Api
          Properties:
            Path: /stack_availability
            Method: get
  ProvisionThingLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handler.provisionThing
      Runtime: nodejs8.10
      Role:
        Fn::GetAtt: ProvisioningLambdaRole.Arn
      Environment:
        Variables:
          ProvisioningKeyTableName:
            Ref: ProvisioningKeyTable
          IoTCameraPolicyName:
            Ref: IoTCameraPolicy
          CameraStreamingRoleAliasName:
            Fn::GetAtt: RoleAliasCustomResource.roleAlias
      Events:
        ProvisionThing:
          Type: Api
          Properties:
            Path: /provision
            Method: post

  #CF Role Alias custom resource
  RoleAliasFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: cfcustomresources/roleAlias.handler
      Runtime: nodejs8.10
      Role:
        Fn::GetAtt: ProvisioningLambdaRole.Arn
  RoleAliasCustomResource:
    Type: Custom::RoleAlias
    Properties:
      ServiceToken:
        Fn::GetAtt: RoleAliasFunction.Arn
      RoleAlias: camera-streaming-role-alias
      RoleArn:
        Fn::GetAtt: CameraStreamingRole.Arn

  #DynamoDB
  #TODO provisioning key mechanism?
  ProvisioningKeyTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: key
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # Lambda Role
  ProvisioningLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: DynamoDBPolicy
          # TODO/TBD permissions regarding provisioning key mechanism.
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
        - PolicyName: IoTPolicy
          # IoT permissions for provisioning and roleAlias lambdas
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iot:DescribeThing
                  - iot:CreateThing
                  - iot:CreateKeysAndCertificate
                  - iot:AttachThingPrincipal
                  - iot:AttachPolicy
                  - iot:DescribeEndpoint
                  - iot:DescribeRoleAlias
                  - iot:CreateRoleAlias
                  - iot:UpdateRoleAlias
                Resource: "*"
        # IAM permission for roleAlias lambda to associate alias to role
        - PolicyName: IAMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  Fn::GetAtt: CameraStreamingRole.Arn

  # IoT camera policy including ability to request CameraStreamingRole credentials
  IoTCameraPolicy:
    Type: AWS::IoT::Policy
    # Retain for connected cameras to function after deleting this stack
    DeletionPolicy: Retain
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:Connect
          - iot:Publish
          - iot:Subscribe
          - iot:Receive
          Resource: "*"
        - Effect: Allow
          Action:
          - iot:assumeRoleWithCertificate
          Resource:
            Fn::GetAtt: RoleAliasCustomResource.roleAliasArn

  # Role to allow camera to stream to KVS. Provided via iot credentials provider endpoint.
  CameraStreamingRole:
    Type: AWS::IAM::Role
    # Retain for connected cameras to function after deleting this stack
    DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: credentials.iot.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: KVSPolicy
          # Permissions for the camera to stream to KVS.
          # TODO restrict to expected operations.
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
              - kinesisvideo:*
              Resource: "*"
Outputs:
  ProvisioningApi:
    Description: "Endpoint base path"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
