AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Connected Camera Provisioning SAM Template

Parameters:
  CreateProvisioningKey:
    Description: "Whether to automatically create a provisioning key when launching the stack"
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
  LambdaZipsBucket:
    Description: "S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: String
    Default: ""
  QSS3KeyPrefix:
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Type: String
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Default: ""

Globals:
  Function:
    Timeout: 6
    Environment:
      Variables:
        ProvisioningKeyTableName:
          Ref: ProvisioningKeyTable
        AWSRegion:
          Fn::Sub: ${AWS::Region}

Resources:
  #Lambdas
  StackAvailabilityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handler.getStackAvailability
      Runtime: nodejs8.10
      Role:
        Fn::GetAtt: ProvisioningLambdaRole.Arn
      Events:
        StackAvailability:
          Type: Api
          Properties:
            Path: /stack_availability
            Method: get
  ProvisionThingLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handler.provisionThing
      Runtime: nodejs8.10
      Role:
        Fn::GetAtt: ProvisioningLambdaRole.Arn
      Environment:
        Variables:
          IoTCameraPolicyName:
            Ref: IoTCameraPolicy
          CameraStreamingRoleAliasName:
            Fn::GetAtt: RoleAliasCustomResource.roleAlias
          MonitoringTopicArn:
            Ref: MonitoringTopic
      Events:
        ProvisionThing:
          Type: Api
          Properties:
            Path: /provision
            Method: post

  #Camera api stubs
  ExampleCameraStatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: cameraHandler.status
      Runtime: nodejs8.10
      Role:
        Fn::GetAtt: ProvisioningLambdaRole.Arn
      Events:
        CameraPairing:
          Type: Api
          Properties:
            Path: /status
            Method: get
  ExampleCameraPairingLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: cameraHandler.pair
      Runtime: nodejs8.10
      Role:
        Fn::GetAtt: ProvisioningLambdaRole.Arn
      Events:
        CameraPairing:
          Type: Api
          Properties:
            Path: /pair
            Method: put
  CameraShadowLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: cameraHandler.shadow
      Runtime: nodejs8.10
      Role:
        Fn::GetAtt: ProvisioningLambdaRole.Arn
      Events:
        CameraPairing:
          Type: Api
          Properties:
            Path: /cameras/{id}/shadow
            Method: get

  #CF Role Alias custom resource
  RoleAliasFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: cfcustomresources/roleAlias.handler
      Runtime: nodejs8.10
      Role:
        Fn::GetAtt: ProvisioningLambdaRole.Arn
  RoleAliasCustomResource:
    Type: Custom::RoleAlias
    Properties:
      ServiceToken:
        Fn::GetAtt: RoleAliasFunction.Arn
      RoleAlias: camera-streaming-role-alias
      RoleArn:
        Fn::GetAtt: CameraStreamingRole.Arn
  #CF Provisioning Key custom resource
  ProvisioningKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: cfcustomresources/provisioningKey.handler
      Runtime: nodejs8.10
      Role:
        Fn::GetAtt: ProvisioningLambdaRole.Arn
  ProvisioningKeyCustomResource:
    Type: Custom::ProvisioningKey
    Properties:
      ServiceToken:
        Fn::GetAtt: ProvisioningKeyFunction.Arn
      CreateProvisioningKey:
        Ref: CreateProvisioningKey
      ProvisioningKeyTableName:
        Ref: ProvisioningKeyTable

  #DynamoDB
  ProvisioningKeyTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: key
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  #Camera Monitoring
  MonitoringTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: CameraMonitoringTopic
      Subscription:
        - Endpoint:
            Fn::GetAtt: MonitoringLambdaFunction.Arn
          Protocol: lambda
  MonitoringLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handler.monitoring
      Runtime: nodejs8.10
      Role:
        Fn::GetAtt: ProvisioningLambdaRole.Arn
  MonitoringLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MonitoringLambdaFunction
      Principal: sns.amazonaws.com

  # Lambda Role
  ProvisioningLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource:
                  Fn::GetAtt: ProvisioningKeyTable.Arn
        - PolicyName: IoTPolicy
          # IoT permissions for provisioning and roleAlias lambdas
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iot:DescribeThing
                  - iot:CreateThing
                  - iot:CreateKeysAndCertificate
                  - iot:AttachThingPrincipal
                  - iot:AttachPolicy
                  - iot:DescribeEndpoint
                  - iot:DescribeRoleAlias
                  - iot:CreateRoleAlias
                  - iot:UpdateRoleAlias
                  - iot:GetThingShadow
                  - iot:UpdateThingShadow
                Resource: "*"
        - PolicyName: CloudWatchPolicy
          # CloudWatch policy to allow creating alarms form KinesisVideo
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                Resource: "*"
        - PolicyName: KinesisVideoPolicy
          # Permission to provision video stream
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesisvideo:DescribeStream
                  - kinesisvideo:CreateStream
                Resource: "*"
        # IAM permission for roleAlias lambda to associate alias to role
        - PolicyName: IAMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  Fn::GetAtt: CameraStreamingRole.Arn

  # IoT camera policy including ability to request CameraStreamingRole credentials
  IoTCameraPolicy:
    Type: AWS::IoT::Policy
    # Retain for connected cameras to function after deleting this stack
    DeletionPolicy: Retain
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:Connect
          Resource: "*"
        - Effect: Allow
          Action:
          - iot:Publish
          Resource:
            - !Join [ "/" , [ !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/$aws/things", "${iot:Connection.Thing.ThingName}", "*"]]
            - !Join [ "/" , [ !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/cameras", "${iot:Connection.Thing.ThingName}", "*"]]
        - Effect: Allow
          Action:
          - iot:assumeRoleWithCertificate
          Resource:
            Fn::GetAtt: RoleAliasCustomResource.roleAliasArn

  # Role to allow camera to stream to KVS. Provided via iot credentials provider endpoint.
  CameraStreamingRole:
    Type: AWS::IAM::Role
    # Retain for connected cameras to function after deleting this stack
    DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: credentials.iot.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: KVSPolicy
          # Permissions for the camera to stream to KVS.
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - kinesisvideo:DescribeStream
                - kinesisvideo:PutMedia
                - kinesisvideo:GetDataEndpoint
              Resource:
                - "*"
Outputs:
  StackEndpoint:
    Description: "Endpoint base path"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  ProvisioningKey:
    Description: "Provisioning key"
    Value:
      Fn::GetAtt: ProvisioningKeyCustomResource.provisioningKey
